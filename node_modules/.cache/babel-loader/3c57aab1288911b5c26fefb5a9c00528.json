{"ast":null,"code":"var _jsxFileName = \"C:\\\\New folder\\\\react-typescript-taskify-master\\\\src\\\\components\\\\SingleTodo.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRef } from \"react\";\nimport { AiFillEdit, AiFillDelete } from \"react-icons/ai\";\nimport { MdDone } from \"react-icons/md\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleTodo = ({\n  index,\n  todo,\n  todos,\n  setTodos\n}) => {\n  _s();\n\n  const [edit, setEdit] = useState(false);\n  const [editTodo, setEditTodo] = useState(todo.todo);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    var _inputRef$current;\n\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }, [edit]);\n\n  const handleEdit = (e, id) => {\n    e.preventDefault();\n    setTodos(todos.map(todo => todo.id === id ? { ...todo,\n      todo: editTodo\n    } : todo));\n    setEdit(false);\n  };\n\n  const handleDelete = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const handleDone = id => {\n    setTodos(todos.map(todo => todo.id === id ? { ...todo,\n      isDone: !todo.isDone\n    } : todo));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    draggableId: todo.id.toString(),\n    index: index,\n    children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleEdit(e, todo.id),\n      ...provided.draggableProps,\n      ...provided.dragHandleProps,\n      ref: provided.innerRef,\n      className: `todos__single ${snapshot.isDragging ? \"drag\" : \"\"}`,\n      children: [edit ? /*#__PURE__*/_jsxDEV(\"input\", {\n        value: editTodo,\n        onChange: e => setEditTodo(e.target.value),\n        className: \"todos__single--text\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this) : todo.isDone ? /*#__PURE__*/_jsxDEV(\"s\", {\n        className: \"todos__single--text\",\n        children: todo.todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"todos__single--text\",\n        children: todo.todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon\",\n          onClick: () => {\n            if (!edit && !todo.isDone) {\n              setEdit(!edit);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(AiFillEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon\",\n          onClick: () => handleDelete(todo.id),\n          children: /*#__PURE__*/_jsxDEV(AiFillDelete, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon\",\n          onClick: () => handleDone(todo.id),\n          children: /*#__PURE__*/_jsxDEV(MdDone, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SingleTodo, \"ajYjq4DwYASb83LAj51+qPYmif4=\");\n\n_c = SingleTodo;\nexport default SingleTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleTodo\");","map":{"version":3,"sources":["C:/New folder/react-typescript-taskify-master/src/components/SingleTodo.tsx"],"names":["React","useEffect","useState","useRef","AiFillEdit","AiFillDelete","MdDone","Draggable","SingleTodo","index","todo","todos","setTodos","edit","setEdit","editTodo","setEditTodo","inputRef","current","focus","handleEdit","e","id","preventDefault","map","handleDelete","filter","handleDone","isDone","toString","provided","snapshot","draggableProps","dragHandleProps","innerRef","isDragging","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRef } from \"react\";\nimport { AiFillEdit, AiFillDelete } from \"react-icons/ai\";\nimport { MdDone } from \"react-icons/md\";\nimport { Todo } from \"../models/models\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nconst SingleTodo: React.FC<{\n  index: number;\n  todo: Todo;\n  todos: Array<Todo>;\n  setTodos: React.Dispatch<React.SetStateAction<Array<Todo>>>;\n}> = ({ index, todo, todos, setTodos }) => {\n  const [edit, setEdit] = useState<boolean>(false);\n  const [editTodo, setEditTodo] = useState<string>(todo.todo);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, [edit]);\n\n  const handleEdit = (e: React.FormEvent, id: number) => {\n    e.preventDefault();\n    setTodos(\n      todos.map((todo) => (todo.id === id ? { ...todo, todo: editTodo } : todo))\n    );\n    setEdit(false);\n  };\n\n  const handleDelete = (id: number) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const handleDone = (id: number) => {\n    setTodos(\n      todos.map((todo) =>\n        todo.id === id ? { ...todo, isDone: !todo.isDone } : todo\n      )\n    );\n  };\n\n  return (\n    <Draggable draggableId={todo.id.toString()} index={index}>\n      {(provided, snapshot) => (\n        <form\n          onSubmit={(e) => handleEdit(e, todo.id)}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          className={`todos__single ${snapshot.isDragging ? \"drag\" : \"\"}`}\n        >\n          {edit ? (\n            <input\n              value={editTodo}\n              onChange={(e) => setEditTodo(e.target.value)}\n              className=\"todos__single--text\"\n              ref={inputRef}\n            />\n          ) : todo.isDone ? (\n            <s className=\"todos__single--text\">{todo.todo}</s>\n          ) : (\n            <span className=\"todos__single--text\">{todo.todo}</span>\n          )}\n          <div>\n            <span\n              className=\"icon\"\n              onClick={() => {\n                if (!edit && !todo.isDone) {\n                  setEdit(!edit);\n                }\n              }}\n            >\n              <AiFillEdit />\n            </span>\n            <span className=\"icon\" onClick={() => handleDelete(todo.id)}>\n              <AiFillDelete />\n            </span>\n            <span className=\"icon\" onClick={() => handleDone(todo.id)}>\n              <MdDone />\n            </span>\n          </div>\n        </form>\n      )}\n    </Draggable>\n  );\n};\n\nexport default SingleTodo;\n"]},"metadata":{},"sourceType":"module"}